{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs20 \cf0 REQUIREMENTS:\

\f1\b0 \
1. You are given the initial starting point (0:0:N) of a rover\
\
2. 0,0 are X,Y coordinates on a grid of [10x10]\
\
3. N is the direction it is facing (i.e: N, S, E, W)\
\
4. Implement commands that turn the rover left/right (L,R)\
\
5. "M" moves the rover one step forward on its current direction\
\
6. The rover receives a char array of inputs: "RRMLMM" and returns its current position and direction: i.e. "3:9:N"\
\
7. Implement wrapping at edges. Once reaching the end of the map, the rover should spawn at the beginning of the axis.\
\
8. Implement obstacle detection before each move to a new square. If a given sequence of commands encounters an obstacle, the rover moves up to the last possible point, aborts the sequence and reports the obstacle.\
\
\

\f0\b RULES:
\f1\b0 \
 1. Hardcore TDD. No Excuses!\
 2. Change roles (driver, navigator) after each TDD cycle.\
 3. No red phases while refactoring.\
 4. Be careful about edge cases and exceptions. We can not afford to lose a mars rover!\
}